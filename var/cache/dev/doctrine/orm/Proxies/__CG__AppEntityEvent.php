<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \App\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'nomEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'lieuxEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'dateEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'heureDebut', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'heureFin', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'participants', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'descriptionEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'afficheEvent'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'nomEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'lieuxEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'dateEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'heureDebut', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'heureFin', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'participants', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'descriptionEvent', '' . "\0" . 'App\\Entity\\Event' . "\0" . 'afficheEvent'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNomEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomEvent', []);

        return parent::getNomEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomEvent(string $nomEvent): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomEvent', [$nomEvent]);

        return parent::setNomEvent($nomEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getLieuxEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLieuxEvent', []);

        return parent::getLieuxEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setLieuxEvent(string $lieuxEvent): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLieuxEvent', [$lieuxEvent]);

        return parent::setLieuxEvent($lieuxEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEvent(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEvent', []);

        return parent::getDateEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEvent(\DateTimeInterface $dateEvent): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEvent', [$dateEvent]);

        return parent::setDateEvent($dateEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeureDebut(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeureDebut', []);

        return parent::getHeureDebut();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeureDebut(\DateTimeInterface $heureDebut): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeureDebut', [$heureDebut]);

        return parent::setHeureDebut($heureDebut);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeureFin(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeureFin', []);

        return parent::getHeureFin();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeureFin(\DateTimeInterface $heureFin): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeureFin', [$heureFin]);

        return parent::setHeureFin($heureFin);
    }

    /**
     * {@inheritDoc}
     */
    public function getParticipants(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParticipants', []);

        return parent::getParticipants();
    }

    /**
     * {@inheritDoc}
     */
    public function addParticipant(\App\Entity\Participant $participant): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParticipant', [$participant]);

        return parent::addParticipant($participant);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParticipant(\App\Entity\Participant $participant): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParticipant', [$participant]);

        return parent::removeParticipant($participant);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionEvent', []);

        return parent::getDescriptionEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionEvent(string $descriptionEvent): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionEvent', [$descriptionEvent]);

        return parent::setDescriptionEvent($descriptionEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getAfficheEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAfficheEvent', []);

        return parent::getAfficheEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setAfficheEvent(string $afficheEvent): static
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAfficheEvent', [$afficheEvent]);

        return parent::setAfficheEvent($afficheEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
